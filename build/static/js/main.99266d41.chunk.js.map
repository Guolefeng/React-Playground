{"version":3,"sources":["dnd/task.js","dnd/column.js","dnd/index.js","playground.js","index.js"],"names":["Container","styled","div","props","isDragging","Task","draggableId","this","task","id","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","aria-roledescription","content","React","Component","Title","h3","TaskList","isDraggingOver","InnerList","nextProps","tasks","map","Column","column","title","droppableId","type","droppableProps","placeholder","taskMap","taskIds","taskId","PureComponent","Dnd","state","columns","columnOrder","onDragStart","start","announce","source","onDragUpdate","update","message","destination","onDragEnd","result","home","foreign","homeTaskIds","Array","from","splice","newHome","foreignTaskIds","newForeign","newState","setState","newTaskIds","newColumnOrder","direction","columnId","Playground","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99266d41.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n\nconst Container = styled.div`\n    border: 1px solid lightgrey;\n    border-radius: 2px;\n    height: 90px;\n    margin-bottom: 8px;\n    background-color: ${props => (props.isDragging ? 'lightgreen' : 'white')};\n    display: flex;\n    align-item: center;\n`;\n\nexport default class Task extends React.Component {\n    render() {\n        return (\n            <Draggable draggableId={this.props.task.id} index={this.props.index}>\n                {(provided, snapshot) => (\n                    <Container\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                        isDragging={snapshot.isDragging}\n                        aria-roledescription=\"Press space bar to lift the task\"\n                    >\n                        {this.props.task.content}\n                    </Container>\n                )}\n            </Draggable>\n        );\n    }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './task';\n\nconst Container = styled.div`\n    margin: 8px;\n    border: 1px solid lightgrey;\n    background-color: white;\n    border-radius: 2px;\n    width: 220px;\n\n    display: flex;\n    flex-direction: column;\n`;\nconst Title = styled.h3`\n    padding: 8px;\n`;\nconst TaskList = styled.div`\n    padding: 8px;\n    transition: background-color 0.2s ease;\n    background-color: ${props =>\n        props.isDraggingOver ? 'lightgrey' : 'inherit'};\n    flex-grow: 1;\n    min-height: 100px;\n`;\n\nclass InnerList extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        if (nextProps.tasks === this.props.tasks) {\n            return false;\n        }\n        return true;\n    }\n    render() {\n        return this.props.tasks.map((task, index) => (\n            <Task key={task.id} task={task} index={index} />\n        ));\n    }\n}\n\nexport default class Column extends React.Component {\n    render() {\n        return (\n            <Draggable draggableId={this.props.column.id} index={this.props.index}>\n                {provided => (\n                    <Container {...provided.draggableProps} ref={provided.innerRef}>\n                        <Title {...provided.dragHandleProps}>\n                            {this.props.column.title}\n                        </Title>\n                        <Droppable droppableId={this.props.column.id} type=\"task\">\n                            {(provided, snapshot) => (\n                                <TaskList\n                                    ref={provided.innerRef}\n                                    {...provided.droppableProps}\n                                    isDraggingOver={snapshot.isDraggingOver}\n                                >\n                                    <InnerList tasks={this.props.tasks} />\n                                    {provided.placeholder}\n                                </TaskList>\n                            )}\n                        </Droppable>\n                    </Container>\n                )}\n            </Draggable>\n        );\n    }\n}\n","import React from 'react';\nimport '@atlaskit/css-reset';\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Column from './column';\n\nconst Container = styled.div`\n    display: flex;\n`;\n\nclass InnerList extends React.PureComponent {\n    render() {\n        const { column, taskMap, index } = this.props;\n        const tasks = column.taskIds.map(taskId => taskMap[taskId]);\n        return <Column column={column} tasks={tasks} index={index} />;\n    }\n}\n\nclass Dnd extends React.Component {\n    state = {\n        tasks: {\n            'task-1': { id: 'task-1', content: 'Take out the garbage' },\n            'task-2': { id: 'task-2', content: 'Watch my favorite show' },\n            'task-3': { id: 'task-3', content: 'Charge my phone' },\n            'task-4': { id: 'task-4', content: 'Cook dinner' },\n        },\n        columns: {\n            'column-1': {\n                id: 'column-1',\n                title: 'To do',\n                taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\n            },\n            'column-2': {\n                id: 'column-2',\n                title: 'In progress',\n                taskIds: [],\n            },\n            'column-3': {\n                id: 'column-3',\n                title: 'Finished',\n                taskIds: [],\n            },\n        },\n        // Facilitate reordering of the columns\n        columnOrder: ['column-1', 'column-2', 'column-3'],\n    };\n\n    onDragStart = (start, provided) => {\n        provided.announce(\n            `You have lifted the task in position ${start.source.index + 1}`,\n        );\n    };\n\n    onDragUpdate = (update, provided) => {\n        const message = update.destination\n            ? `You have moved the task to position ${update.destination.index + 1}`\n            : `You are currently not over a droppable area`;\n\n        provided.announce(message);\n    };\n\n    onDragEnd = (result, provided) => {\n        const message = result.destination\n            ? `You have moved the task from position\n        ${result.source.index + 1} to ${result.destination.index + 1}`\n            : `The task has been returned to its starting position of\n        ${result.source.index + 1}`;\n\n        provided.announce(message);\n\n        const { destination, source, draggableId, type } = result;\n\n        if (!destination) {\n            return;\n        }\n\n        if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ) {\n            return;\n        }\n\n        if (type === 'column') {\n            const newColumnOrder = Array.from(this.state.columnOrder);\n            newColumnOrder.splice(source.index, 1);\n            newColumnOrder.splice(destination.index, 0, draggableId);\n\n            const newState = {\n                ...this.state,\n                columnOrder: newColumnOrder,\n            };\n            this.setState(newState);\n            return;\n        }\n\n        const home = this.state.columns[source.droppableId];\n        const foreign = this.state.columns[destination.droppableId];\n\n        if (home === foreign) {\n            const newTaskIds = Array.from(home.taskIds);\n            newTaskIds.splice(source.index, 1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n\n            const newHome = {\n                ...home,\n                taskIds: newTaskIds,\n            };\n\n            const newState = {\n                ...this.state,\n                columns: {\n                    ...this.state.columns,\n                    [newHome.id]: newHome,\n                },\n            };\n\n            this.setState(newState);\n            return;\n        }\n\n        // moving from one list to another\n        const homeTaskIds = Array.from(home.taskIds);\n        homeTaskIds.splice(source.index, 1);\n        const newHome = {\n            ...home,\n            taskIds: homeTaskIds,\n        };\n\n        const foreignTaskIds = Array.from(foreign.taskIds);\n        foreignTaskIds.splice(destination.index, 0, draggableId);\n        const newForeign = {\n            ...foreign,\n            taskIds: foreignTaskIds,\n        };\n\n        const newState = {\n            ...this.state,\n            columns: {\n                ...this.state.columns,\n                [newHome.id]: newHome,\n                [newForeign.id]: newForeign,\n            },\n        };\n        this.setState(newState);\n    };\n\n    render() {\n        return (\n            <DragDropContext\n                onDragStart={this.onDragStart}\n                onDragUpdate={this.onDragUpdate}\n                onDragEnd={this.onDragEnd}\n            >\n                <Droppable\n                    droppableId=\"all-columns\"\n                    direction=\"horizontal\"\n                    type=\"column\"\n                >\n                    {provided => (\n                        <Container\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                        >\n                            {this.state.columnOrder.map((columnId, index) => {\n                                const column = this.state.columns[columnId];\n                                return (\n                                    <InnerList\n                                        key={column.id}\n                                        column={column}\n                                        taskMap={this.state.tasks}\n                                        index={index}\n                                    />\n                                );\n                            })}\n                            {provided.placeholder}\n                        </Container>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        );\n    }\n}\n\nexport default Dnd;\n","import Dnd from './dnd';\n\nfunction Playground() {\n    return <Dnd />\n}\n\nexport default Playground;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Playground from './playground';\n\nReactDOM.render(\n    <Playground />,\n    document.getElementById('root')\n);"],"sourceRoot":""}